[1mdiff --git a/BackEnd/Dockerfile.local b/BackEnd/Dockerfile.local[m
[1mnew file mode 100644[m
[1mindex 0000000..011136c[m
[1m--- /dev/null[m
[1m+++ b/BackEnd/Dockerfile.local[m
[36m@@ -0,0 +1,34 @@[m
[32m+[m[32m# Start with the .NET Core SDK image[m
[32m+[m[32mFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build[m
[32m+[m
[32m+[m[32m# Set the working directory to the project directory[m
[32m+[m[32mWORKDIR /app[m
[32m+[m
[32m+[m[32m# Copy the project file and restore dependencies[m
[32m+[m[32mCOPY BackEnd/*.csproj ./[m
[32m+[m[32mRUN dotnet restore[m
[32m+[m
[32m+[m[32m# Copy the remaining source code[m
[32m+[m[32mCOPY BackEnd/. ./[m
[32m+[m
[32m+[m[32m# Build the application[m
[32m+[m[32mRUN dotnet build -c Release -o out SportingStatsBackEnd.csproj[m
[32m+[m
[32m+[m[32m# Specify the runtime image[m
[32m+[m[32mFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime[m
[32m+[m
[32m+[m[32m# Set the environment variable to Development or Production based on your needs[m
[32m+[m[32mARG ASPNETCORE_ENVIRONMENT[m
[32m+[m[32mENV ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}[m
[32m+[m
[32m+[m[32m# Set the working directory for the runtime image[m
[32m+[m[32mWORKDIR /app[m
[32m+[m
[32m+[m[32m# Copy the built application from the build image[m
[32m+[m[32mCOPY --from=build /app/out ./[m
[32m+[m
[32m+[m[32m#Expose the required ports[m
[32m+[m[32mEXPOSE 5000 5001[m
[32m+[m
[32m+[m[32m# Specify the entry point[m
[32m+[m[32mENTRYPOINT ["dotnet", "SportingStatsBackEnd.dll"][m
\ No newline at end of file[m
[1mdiff --git a/BackEnd/Program.cs b/BackEnd/Program.cs[m
[1mindex 407d0e4..b6796aa 100644[m
[1m--- a/BackEnd/Program.cs[m
[1m+++ b/BackEnd/Program.cs[m
[36m@@ -68,7 +68,7 @@[m [mpublic class Program[m
             options.AddPolicy("AllowSpecificOrigin",[m
                 builder =>[m
                 {[m
[31m-                    builder.WithOrigins(allowedOrigins)[m
[32m+[m[32m                    builder.WithOrigins("http://localhost:8080")  //for Production -> .WithOrigins(allowedOrigins)[m
                            .AllowAnyMethod()[m
                            .AllowAnyHeader();[m
                 });[m
[1mdiff --git a/BackEnd/appsettings.Development.json b/BackEnd/appsettings.Development.json[m
[1mindex d61b9a0..6f976cb 100644[m
[1m--- a/BackEnd/appsettings.Development.json[m
[1m+++ b/BackEnd/appsettings.Development.json[m
[36m@@ -3,8 +3,14 @@[m
     "DefaultConnection": "Server=DESKTOP-991CSD7\\SPORTSSTATS;Database=SportsStatsDB;User Id=sa;Password=Wabush#002;TrustServerCertificate=True;"[m
   },[m
   "AllowedOrigins": [[m
[31m-    "https://localhost",[m
[31m-    "https://localhost5000"[m
[31m-  ][m
[32m+[m[32m    "http://localhost",[m
[32m+[m[32m    "http://localhost:5000"[m
[32m+[m[32m  ],[m
[32m+[m[32m  "Kestrel": {[m
[32m+[m[32m    "Endpoints": {[m
[32m+[m[32m      "Http": {[m
[32m+[m[32m        "Url": "http://*:5000"[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
 }[m
[31m-[m
[1mdiff --git a/BackEnd/appsettings.json b/BackEnd/appsettings.json[m
[1mindex aa41560..85ffc1c 100644[m
[1m--- a/BackEnd/appsettings.json[m
[1m+++ b/BackEnd/appsettings.json[m
[36m@@ -9,19 +9,5 @@[m
       "Microsoft.AspNetCore": "Warning"[m
     }[m
   },[m
[31m-  "AllowedHosts": "*",[m
[31m-  "Kestrel": {[m
[31m-    "Endpoints": {[m
[31m-      "Http": {[m
[31m-        "Url": "http://*:5000"[m
[31m-      },[m
[31m-      "Https": {[m
[31m-        "Url": "https://*:5001",[m
[31m-        "Certificate": {[m
[31m-          "Path": "/https/ssl/certs/cert.pem",[m
[31m-          "KeyPath": "/https/ssl/private/key.pem"[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[32m+[m[32m  "AllowedHosts": "*"[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/FrontEnd/Dockerfile.local b/FrontEnd/Dockerfile.local[m
[1mnew file mode 100644[m
[1mindex 0000000..93585e4[m
[1m--- /dev/null[m
[1m+++ b/FrontEnd/Dockerfile.local[m
[36m@@ -0,0 +1,70 @@[m
[32m+[m[32m# Use Node.js LTS version as base image[m
[32m+[m[32mFROM node:20 AS build[m
[32m+[m
[32m+[m[32m# Set the working directory inside the container[m
[32m+[m[32mWORKDIR /app[m
[32m+[m
[32m+[m[32m# Copy package.json and package-lock.json (if available) to /app[m
[32m+[m[32mCOPY FrontEnd/package*.json ./[m
[32m+[m
[32m+[m[32m# Install dependencies[m
[32m+[m[32mRUN npm install[m
[32m+[m[32mRUN npm install express[m
[32m+[m
[32m+[m[32m# Copy the rest of the application code to /app[m
[32m+[m[32mCOPY FrontEnd/. .[m
[32m+[m
[32m+[m[32m# Copy .env.production to /app[m
[32m+[m[32mCOPY FrontEnd/.env.development .env[m
[32m+[m
[32m+[m[32m# Set environment variable for backend URL during the build process[m
[32m+[m[32mARG VUE_APP_BACKEND_URL[m
[32m+[m[32mENV VUE_APP_BACKEND_URL=${VUE_APP_BACKEND_URL}[m
[32m+[m
[32m+[m[32m# Debug: Print environment variables before build[m
[32m+[m[32mRUN echo "Environment variables before build:"[m
[32m+[m[32mRUN printenv[m
[32m+[m
[32m+[m[32m# Build the Vue.js project[m
[32m+[m[32mRUN npm run build[m
[32m+[m
[32m+[m[32m# Debug: Print environment variables after build[m
[32m+[m[32mRUN echo "Environment variables after build:"[m
[32m+[m[32mRUN printenv[m
[32m+[m
[32m+[m[32m# Use node base image for runtime[m
[32m+[m[32mFROM node:20[m
[32m+[m
[32m+[m[32m# Install serve and PM2[m
[32m+[m[32mRUN npm install -g serve pm2[m
[32m+[m
[32m+[m[32m# Set the working directory[m
[32m+[m[32mWORKDIR /app[m
[32m+[m
[32m+[m[32m# Copy built files from the build stage[m
[32m+[m[32mCOPY --from=build /app/dist /app/dist[m
[32m+[m
[32m+[m[32m# Copy dependencies from build stage[m
[32m+[m[32mCOPY --from=build /app/node_modules /app/node_modules[m
[32m+[m[32m#COPY --from=build /app/package.json /app/package.json[m
[32m+[m
[32m+[m[32m# Copy pm2[m
[32m+[m[32mCOPY FrontEnd/pm2.dev.json /app/pm2.dev.json[m
[32m+[m
[32m+[m[32m# Copy healthcheck script[m
[32m+[m[32mCOPY FrontEnd/healthcheck.js /app/healthcheck.js[m
[32m+[m
[32m+[m[32m# Copy the start-serve script[m
[32m+[m[32mCOPY FrontEnd/start-serve.js /app/start-serve.js[m
[32m+[m
[32m+[m[32m# Copy images[m
[32m+[m[32mCOPY FrontEnd/public/images /usr/share/nginx/html/public/images[m
[32m+[m
[32m+[m[32m# Copy environment variables file[m
[32m+[m[32mCOPY FrontEnd/.env.development .env[m
[32m+[m
[32m+[m[32m# Expose ports[m
[32m+[m[32mEXPOSE 8080 3001[m
[32m+[m
[32m+[m[32m# Start the Vue.js app and health check server using PM2[m
[32m+[m[32mCMD ["pm2-runtime", "start", "/app/pm2.dev.json"][m
\ No newline at end of file[m
[1mdiff --git a/FrontEnd/pm2.dev.json b/FrontEnd/pm2.dev.json[m
[1mnew file mode 100644[m
[1mindex 0000000..b68e273[m
[1m--- /dev/null[m
[1m+++ b/FrontEnd/pm2.dev.json[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32m{[m
[32m+[m[32m  "apps": [[m
[32m+[m[32m    {[m
[32m+[m[32m      "name": "vue-app",[m
[32m+[m[32m      "script": "/app/start-serve.js",[m
[32m+[m[32m      "env": {[m
[32m+[m[32m        "NODE_ENV": "development",[m
[32m+[m[32m        "HTTPS": "false",[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m      "name": "healthcheck",[m
[32m+[m[32m      "script": "/app/healthcheck.js",[m
[32m+[m[32m      "env": {[m
[32m+[m[32m        "PORT": "3001"[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
[32m+[m[32m  ][m
[32m+[m[32m}[m
[1mdiff --git a/certs/dhparam.pem b/certs/dhparam.pem[m
[1mnew file mode 100644[m
[1mindex 0000000..e69de29[m
[1mdiff --git a/docker-compose.dev.yml b/docker-compose.dev.yml[m
[1mnew file mode 100644[m
[1mindex 0000000..b51386c[m
[1m--- /dev/null[m
[1m+++ b/docker-compose.dev.yml[m
[36m@@ -0,0 +1,48 @@[m
[32m+[m[32mversion: '3.8'[m
[32m+[m
[32m+[m[32mservices:[m
[32m+[m[32m  backend:[m
[32m+[m[32m    image: backend:latestlocal[m
[32m+[m[32m    build:[m
[32m+[m[32m      context: .[m
[32m+[m[32m      dockerfile: BackEnd/Dockerfile.local[m
[32m+[m[32m    environment:[m
[32m+[m[32m      - ASPNETCORE_ENVIRONMENT=Development[m
[32m+[m[32m    ports:[m
[32m+[m[32m      - "5000:5000"[m
[32m+[m[32m      - "5001:5001"[m
[32m+[m[32m    networks:[m
[32m+[m[32m      - sportingstats-network[m
[32m+[m
[32m+[m[32m  frontend:[m
[32m+[m[32m    image: frontend:latestlocal[m
[32m+[m[32m    build:[m
[32m+[m[32m      context: .[m
[32m+[m[32m      dockerfile: FrontEnd/Dockerfile.local[m
[32m+[m[32m      args:[m
[32m+[m[32m        - VUE_APP_BACKEND_URL=http://localhost:5000[m
[32m+[m[32m    environment:[m
[32m+[m[32m      - NODE_ENV=development[m
[32m+[m[32m      - VUE_APP_BACKEND_URL=http://localhost:5000[m
[32m+[m[32m    ports:[m
[32m+[m[32m      - "8080:8080"[m
[32m+[m[32m      - "3001:3001"[m
[32m+[m[32m    networks:[m
[32m+[m[32m      - sportingstats-network[m
[32m+[m
[32m+[m[32m  nginx:[m
[32m+[m[32m    image: nginx:latest[m
[32m+[m[32m    ports:[m
[32m+[m[32m      - "80:80"[m
[32m+[m[32m      - "443:443"[m
[32m+[m[32m    depends_on:[m
[32m+[m[32m      - frontend[m
[32m+[m[32m      - backend[m
[32m+[m[32m    volumes:[m
[32m+[m[32m      - ./nginx.dev.conf:/etc/nginx/nginx.dev.conf:ro[m
[32m+[m[32m    networks:[m
[32m+[m[32m      - sportingstats-network[m
[32m+[m
[32m+[m[32mnetworks:[m
[32m+[m[32m  sportingstats-network:[m
[32m+[m[32m    driver: bridge[m
[1mdiff --git a/nginx.dev.conf b/nginx.dev.conf[m
[1mnew file mode 100644[m
[1mindex 0000000..a7a8b3d[m
[1m--- /dev/null[m
[1m+++ b/nginx.dev.conf[m
[36m@@ -0,0 +1,75 @@[m
[32m+[m[32mworker_processes auto;[m
[32m+[m[32merror_log /var/log/nginx/error.log;[m
[32m+[m[32mpid /run/nginx.pid;[m
[32m+[m
[32m+[m[32mevents {[m
[32m+[m[32m    worker_connections 1024;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mhttp {[m
[32m+[m[32m    include /etc/nginx/mime.types;[m
[32m+[m[32m    default_type application/octet-stream;[m
[32m+[m[32m    sendfile on;[m
[32m+[m[32m    keepalive_timeout 65;[m
[32m+[m	[32mserver_tokens off;[m
[32m+[m[41m	[m
[32m+[m[32m    server {[m
[32m+[m[32m        listen 80;[m
[32m+[m[32m        server_name localhost;[m
[32m+[m
[32m+[m[32m        # No redirect to HTTPS for local development[m
[32m+[m[32m        # return 301 https://$host$request_uri;[m
[32m+[m
[32m+[m[32m        location / {[m
[32m+[m[32m            proxy_pass http://frontend:8080;[m
[32m+[m[32m            proxy_set_header Host $host;[m
[32m+[m[32m            proxy_set_header X-Real-IP $remote_addr;[m
[32m+[m[32m            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;[m
[32m+[m[32m            proxy_set_header X-Forwarded-Proto $scheme;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m		[32mlocation /images/ {[m
[32m+[m			[32malias /usr/share/nginx/html/public/images/;[m
[32m+[m			[32mexpires 30d;[m
[32m+[m			[32madd_header Cache-Control "public, must-revalidate, proxy-revalidate";[m
[32m+[m		[32m}[m
[32m+[m[41m		[m
[32m+[m[32m        location /api {[m
[32m+[m[32m            proxy_pass http://backend:5000;[m
[32m+[m[32m            proxy_set_header Host $host;[m
[32m+[m[32m            proxy_set_header X-Real-IP $remote_addr;[m
[32m+[m[32m            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;[m
[32m+[m[32m            proxy_set_header X-Forwarded-Proto $scheme;[m
[32m+[m[41m			[m
[32m+[m			[32m# CORS headers[m
[32m+[m
[32m+[m[32m            add_header 'Access-Control-Allow-Origin' 'http://localhost:8080' always;[m
[32m+[m			[32madd_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;[m
[32m+[m			[32madd_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;[m
[32m+[m[41m    [m
[32m+[m			[32m# Handle preflight requests[m
[32m+[m			[32mif ($request_method = 'OPTIONS') {[m
[32m+[m				[32madd_header 'Access-Control-Allow-Origin' 'http://localhost:8080' always;[m
[32m+[m				[32madd_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;[m
[32m+[m				[32madd_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;[m
[32m+[m				[32madd_header 'Access-Control-Max-Age' 1728000;[m
[32m+[m[32m                return 204;[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        location /health {[m
[32m+[m[32m            proxy_pass http://frontend:3001/health;[m
[32m+[m[32m            proxy_set_header Host $host;[m
[32m+[m[32m            proxy_set_header X-Real-IP $remote_addr;[m
[32m+[m[32m            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;[m
[32m+[m[32m            proxy_set_header X-Forwarded-Proto $scheme;[m
[32m+[m[32m        }[m
[32m+[m[41m		[m
[32m+[m		[32merror_page 404 /404.html;[m
[32m+[m		[32merror_page 500 502 503 504 /50x.html;[m
[32m+[m
[32m+[m		[32mlocation = /50x.html {[m
[32m+[m			[32mroot /usr/share/nginx/html;[m
[32m+[m		[32m}[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
